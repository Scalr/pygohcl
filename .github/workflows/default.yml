name: pygohcl python package

on:
  push:
  pull_request:

jobs:
  tests:
    name: tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: dev-requirements.txt
          check-latest: true

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt

      - name: Install package
        run: |
          pip install -e .

      - name: Test with pytest for Python ${{ matrix.python-version }}
        run: |
          pytest --doctest-modules -o junit_family=xunit2 --junitxml=junit/test-results-${{ matrix.python-version }}.xml

      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        if: ${{ always() }}

  build-linux:
    name: Build wheels on Linux
    # if: startsWith(github.ref, 'refs/tags/')
    # needs: [tests]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

#      - name: Ensure pipx (it necesary only when you run actions locally with the act)
#        if: runner.os == 'Linux'
#        run: |
#          command -v pipx >/dev/null 2>&1 || apt update -y \
#          && apt install -y python3-pip python3-venv \
#          && python3 -m pip install pipx \
#          && python3 -m pipx ensurepath \
#          && pipx --version

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.3
        env:
          CIBW_ENVIRONMENT: PATH=$(pwd)/go/bin:$PATH
          CIBW_BEFORE_ALL: sh pre-build-command.sh
          CIBW_BUILD: "cp37-* cp38-* cp39-* cp310-* cp311-*"
          CIBW_SKIP: "pp* *-musllinux*"
          CIBW_ARCHS_LINUX: x86_64 aarch64

      - uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  build-macos:
      name: Build wheels on MacOS
      # if: startsWith(github.ref, 'refs/tags/')
      # needs: [tests]
      runs-on: macos-latest

      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Build wheels
          uses: pypa/cibuildwheel@v2.11.3
          env:
            CIBW_ENVIRONMENT: PATH=$(pwd)/go/bin:$PATH
            CIBW_BEFORE_ALL: sh pre-build-command.sh
            CIBW_BUILD: "cp37-* cp38-* cp39-* cp310-* cp311-*"
            CIBW_SKIP: "pp* *-musllinux*"
            CIBW_ARCHS_MACOS: x86_64 universal2

        - uses: actions/upload-artifact@v3
          with:
            name: wheels
            path: ./wheelhouse/*.whl

  upload:
    name: upload
    if: startsWith(github.ref, 'refs/tags/test')
    needs: [build-linux, build-macos]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: wheels
        path: dist

    - name: Display structure of downloaded files
      run: ls -lh dist

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: ${{ secrets.PYPI_USERNAME }}
        password: ${{ secrets.PYPI_PASSWORD }}
